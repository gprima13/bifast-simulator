package com.alto.id.bifast.simulator.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TestCaseDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestCaseDetailAllPropertiesEquals(TestCaseDetail expected, TestCaseDetail actual) {
        assertTestCaseDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertTestCaseDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestCaseDetailAllUpdatablePropertiesEquals(TestCaseDetail expected, TestCaseDetail actual) {
        assertTestCaseDetailUpdatableFieldsEquals(expected, actual);
        assertTestCaseDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestCaseDetailAutoGeneratedPropertiesEquals(TestCaseDetail expected, TestCaseDetail actual) {
        assertThat(expected)
            .as("Verify TestCaseDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestCaseDetailUpdatableFieldsEquals(TestCaseDetail expected, TestCaseDetail actual) {
        assertThat(expected)
            .as("Verify TestCaseDetail relevant properties")
            .satisfies(e -> assertThat(e.getMatchingParam()).as("check matchingParam").isEqualTo(actual.getMatchingParam()))
            .satisfies(e -> assertThat(e.getMatchingValue()).as("check matchingValue").isEqualTo(actual.getMatchingValue()))
            .satisfies(e -> assertThat(e.getValueType()).as("check valueType").isEqualTo(actual.getValueType()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestCaseDetailUpdatableRelationshipsEquals(TestCaseDetail expected, TestCaseDetail actual) {
        assertThat(expected)
            .as("Verify TestCaseDetail relationships")
            .satisfies(e -> assertThat(e.getTestCase()).as("check testCase").isEqualTo(actual.getTestCase()));
    }
}
